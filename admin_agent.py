from uuid import uuid4

from agents import Agent, Runner, function_tool
from agents.mcp import MCPServer
from agents.model_settings import ModelSettings
from openai import OpenAI

from schemas import ChatResponse, ChatRequest, MessageResponse
from mongo_db import db
from mongodb_session import MongoDBSession


@function_tool
async def process_image(image_url: str, prompt: str) -> str:
    print(image_url)
    print(prompt)
    """
    Processes an image using the OpenAI API with a given prompt.

    This function sends a user prompt and an image (provided via URL) to the OpenAI API, 
    and returns the assistant's response as a string. It can be used for tasks such as 
    describing the image, identifying objects or colors, or answering questions about the image.

    Args:
        image_url (str): A direct URL to the image to be processed.
        prompt (str): A textual instruction or question to guide the AI's response.

    Returns:
        str: The response generated by the OpenAI model based on the image and prompt.
    """
    client = OpenAI()

    response = client.responses.create(
        model="gpt-4.1-mini",
        input=[{
            "role": "user",
            "content": [
                {"type": "input_text", "text": prompt},
                {
                    "type": "input_image",
                    "image_url": image_url,
                },
            ],
        }],
    )

    return response.output_text


def format_agent_input(chat_req: ChatRequest):
    if not chat_req.images_urls:
        content = [{
            "type": "input_text",
            "text": chat_req.message
        }]
    
    else:
        images_text = "\n".join([f"Image url: {url}" for url in chat_req.images_urls]) 

        content = [{
            "type": "input_text",
            "text": f"{chat_req.message} \n {images_text}"
        }]

    messages = [
        {
            "role": "user",
            "content": content
        }
    ]

    return messages


async def process_message(mcp_server: MCPServer, chat_req: ChatRequest) -> ChatResponse:
    print(chat_req.images_urls)
    agent = Agent(
        name="E-commerce Admin Assistant",
        # model="gpt-4.1-mini",
        instructions="""
        You are an E-commerce admin assistant. Use the provided tools to 
        help to human e-commerce admins. Does not answer to non related
        to e-commerce questions. Be grateful. You can answer to greeting 
        messages and similar. Sometimes images via URL can be provided, 
        use them also. Use tool call to get info about images. 
        """,
        mcp_servers=[mcp_server],
        model_settings=ModelSettings(tool_choice="auto"),
        tools=[process_image]
    )

    conversation_id = (
        chat_req.conversation_id if chat_req.conversation_id else str(uuid4())
    )

    session = MongoDBSession(conversation_id, db)

    agent_input = format_agent_input(chat_req)

    result = await Runner.run(
        starting_agent=agent, input=agent_input, session=session
    )

    output = result.final_output

    return ChatResponse(
        messages=[MessageResponse(content=output)], conversation_id=conversation_id
    )
